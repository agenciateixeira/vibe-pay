/**
 * Script para sincronizar usu√°rios do Supabase Auth com a tabela users
 *
 * USO:
 * 1. Certifique-se de ter as depend√™ncias instaladas: npm install
 * 2. Execute este script a partir da raiz do projeto:
 *
 * node scripts/sync-auth-users.js
 */

const { createClient } = require('@supabase/supabase-js')
const dotenv = require('dotenv')

// Carregar vari√°veis de ambiente
dotenv.config()

const supabaseUrl = process.env.SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå ERRO: Vari√°veis de ambiente n√£o configuradas!')
  console.error('Certifique-se de que SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o no arquivo .env')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function syncAuthUsers() {
  try {
    console.log('üîÑ Iniciando sincroniza√ß√£o de usu√°rios...\n')

    // 1. Buscar todos os usu√°rios do Auth
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers()

    if (authError) {
      console.error('‚ùå Erro ao buscar usu√°rios do Auth:', authError.message)
      process.exit(1)
    }

    console.log(`üìä Encontrados ${authUsers.users.length} usu√°rios no Auth\n`)

    // 2. Para cada usu√°rio do Auth, verificar se existe na tabela users
    let syncedCount = 0
    let existingCount = 0
    let errorCount = 0

    for (const authUser of authUsers.users) {
      // Verificar se j√° existe
      const { data: existingUser } = await supabase
        .from('users')
        .select('id')
        .eq('auth_user_id', authUser.id)
        .single()

      if (existingUser) {
        console.log(`‚úÖ Usu√°rio j√° existe: ${authUser.email}`)
        existingCount++
        continue
      }

      // Criar registro na tabela users
      console.log(`üîß Criando registro para: ${authUser.email}`)

      const { error: insertError } = await supabase
        .from('users')
        .insert({
          auth_user_id: authUser.id,
          email: authUser.email,
          full_name: authUser.user_metadata?.full_name || authUser.email.split('@')[0],
          cpf_cnpj: authUser.user_metadata?.cpf_cnpj || null,
          phone: authUser.user_metadata?.phone || authUser.phone || null,
          company_name: authUser.user_metadata?.company_name || null,
          balance: 0,
          total_received: 0,
          total_withdrawn: 0,
          can_withdraw: false,
          two_factor_enabled: false,
          documents_verified: false
        })

      if (insertError) {
        console.error(`‚ùå Erro ao criar usu√°rio ${authUser.email}:`, insertError.message)
        errorCount++
      } else {
        console.log(`‚úÖ Usu√°rio criado: ${authUser.email}`)
        syncedCount++
      }
    }

    // Resumo
    console.log('\n' + '='.repeat(50))
    console.log('üìà RESUMO DA SINCRONIZA√á√ÉO')
    console.log('='.repeat(50))
    console.log(`Total de usu√°rios no Auth: ${authUsers.users.length}`)
    console.log(`J√° existiam na tabela users: ${existingCount}`)
    console.log(`Novos usu√°rios criados: ${syncedCount}`)
    console.log(`Erros: ${errorCount}`)
    console.log('='.repeat(50))

    if (syncedCount > 0) {
      console.log('\n‚úÖ Sincroniza√ß√£o conclu√≠da! Os usu√°rios j√° podem fazer login.')
    } else if (existingCount === authUsers.users.length) {
      console.log('\n‚úÖ Todos os usu√°rios j√° estavam sincronizados!')
    }

  } catch (error) {
    console.error('‚ùå Erro fatal:', error.message)
    process.exit(1)
  }
}

// Executar
syncAuthUsers()
